{:min-bb-version
 "0.6.8"

 :tasks
 {:requires           ([babashka.fs :as fs]
                       [babashka.process :as process]
                       [clojure.string :as str]
                       [clojure.pprint :as pprint])

  :init               (do
                        (defn get-env [s]
                          (System/getenv s))

                        (defn get-property [s]
                          (System/getProperty s))

                        (defn pretty-print [x]
                          (binding [pprint/*print-right-margin* 130]
                            (pprint/pprint x)))

                        (defn execute [command]
                          (-> command (process/tokenize) (process/process) :out slurp str/trim-newline))

                        (def -zone-id (java.time.ZoneId/of "UTC"))
                        (def -datetime-formatter java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
                        (def -current-timestamp (java.time.ZonedDateTime/now -zone-id))
                        (def -build-timestamp (str (.format -current-timestamp -datetime-formatter)))
                        (def -build-number (execute "git rev-list HEAD --count"))
                        (def -git-url (execute "git config --get remote.origin.url"))
                        (def -git-branch (execute "git rev-parse --abbrev-ref HEAD"))
                        (def -git-sha (execute "git rev-parse --short HEAD"))

                        (def -release? (= "master" -git-branch))
                        (def -snapshot? (not -release?))
                        (def -deployable? (contains? #{"master"} -git-branch))

                        (def -version-template (execute "cat version.tmpl"))
                        (def -version (cond-> (str/replace -version-template "{{build-number}}" -build-number)
                                        -snapshot? (str "-SNAPSHOT")))

                        (def -config
                          {:version         -version
                           :build-number    -build-number
                           :build-timestamp -build-timestamp
                           :git-url         -git-url
                           :git-branch      -git-branch
                           :git-sha         -git-sha})

                        (def extra-env
                          {})

                        (def -backend-image-name "clojure-garden/backend")
                        (def -backend-dockerfile "./deployment/images/backend/Dockerfile")

                        (def -local-docker-compose-file "./deployment/local/docker-compose.yaml")

                        ;; Example:
                        ;; clojure-garden/backend:latest (master branch only)
                        ;; clojure-garden/backend:<branch>
                        ;; clojure-garden/backend:<version>-<branch>
                        ;; clojure-garden/backend:<version>-<branch>-<git-sha>

                        (defn build-image-tags [image-name]
                          (cond->> [(format "%s:%s" image-name -git-branch)
                                    (format "%s:%s-%s" image-name -version -git-branch)
                                    (format "%s:%s-%s-%s" image-name -version -git-branch -git-sha)]
                            -release? (cons (format "%s:latest" image-name))))

                        (defn as-tags [tags]
                          (->> tags (interpose "-t ") (str/join \space))))

  :enter              (let [{:keys [doc skip-doc?]
                             :or   {skip-doc? false}} (current-task)]
                        (when (and doc (not skip-doc?))
                          (println (format "â–¸ [clojure-garden v%s] %s" -version doc))))

  ;;;;
  ;; Tasks
  ;;;;

  version             {:doc       "Show version"
                       :skip-doc? true
                       :task      (print -version)}

  config              {:doc       "Show config"
                       :skip-doc? true
                       :task      (pretty-print -config)}

  setup               {:doc  "Setup dependencies"
                       :task (println "not implemented")}

  build-image:backend {:doc  "Build backend docker image"
                       :task (let [tags (->> -backend-image-name build-image-tags as-tags)]
                               (shell (format "docker build -t %s -f %s ." tags -backend-dockerfile)))}

  push-image:backend  {:doc  "Push backend docker image"
                       :task (doseq [tag (build-image-tags -backend-image-name)]
                               (if -deployable?
                                 (shell (format "docker push %s" tag))
                                 (println (format "Skip: %s" tag))))}

  build-images        {:doc  "Build all docker images"
                       :task (run 'build-image:backend)}

  push-images         {:doc  "Push all docker images"
                       :task (run 'push-image:backend)}

  up                  {:doc  "Start local environment"
                       :task (shell (format "docker compose -f %s up -d" -local-docker-compose-file))}

  down                {:doc  "Shutdown local environment"
                       :task (shell (format "docker compose -f %s down" -local-docker-compose-file))}}}
