{:min-bb-version
 "0.6.8"

 :tasks
 {:requires        ([babashka.fs :as fs]
                    [babashka.process :as process]
                    [clojure.string :as str]
                    [clojure.pprint :as pprint])

  :init            (do
                     (defn get-env [s]
                       (System/getenv s))

                     (defn get-property [s]
                       (System/getProperty s))

                     (defn pretty-print [x]
                       (binding [pprint/*print-right-margin* 130]
                         (pprint/pprint x)))

                     (defn execute [command]
                       (-> command (process/tokenize) (process/process) :out slurp str/trim-newline))

                     (def -zone-id (java.time.ZoneId/of "UTC"))
                     (def -datetime-formatter java.time.format.DateTimeFormatter/ISO_OFFSET_DATE_TIME)
                     (def -current-timestamp (java.time.ZonedDateTime/now -zone-id))
                     (def -build-timestamp (str (.format -current-timestamp -datetime-formatter)))
                     (def -build-number (execute "git rev-list HEAD --count"))
                     (def -git-url (execute "git config --get remote.origin.url"))
                     (def -git-branch (execute "git rev-parse --abbrev-ref HEAD"))
                     (def -git-sha (execute "git rev-parse --short HEAD"))

                     (def -release? (= "master" -git-branch))
                     (def -snapshot? (not -release?))

                     (def -version-template (execute "cat ../../version.tmpl"))
                     (def -version (cond-> (str/replace -version-template "{{build-number}}" -build-number)
                                     -snapshot? (str "-SNAPSHOT")))

                     (def -config
                       {:version         -version
                        :build-number    -build-number
                        :build-timestamp -build-timestamp
                        :git-url         -git-url
                        :git-branch      -git-branch
                        :git-sha         -git-sha})

                     (def extra-env
                       {"VERSION"         -version
                        "BUILD_NUMBER"    -build-number
                        "BUILD_TIMESTAMP" -build-timestamp
                        "GIT_URL"         -git-url
                        "GIT_BRANCH"      -git-branch
                        "GIT_SHA"         -git-sha})

                     (defn as-params [params]
                       (->> params
                         (seq)
                         (flatten)
                         (map (fn [x]
                                (str/replace (pr-str x) (java.util.regex.Pattern/compile "(\".+\")") "'$1'")))
                         (str/join \space)))

                     (defn with-params [command]
                       (->> -config
                         (as-params)
                         (str command " "))))

  :enter           (let [{:keys [doc skip-doc?]
                          :or   {skip-doc? false}} (current-task)]
                     (when (and doc (not skip-doc?))
                       (println (format "â–¸ [clojure-garden/frontend v%s] %s" -version doc))))

  ;;;;
  ;; Tasks
  ;;;;



  version          {:doc       "Show version"
                    :skip-doc? true
                    :task      (print -version)}

  config           {:doc       "Show config"
                    :skip-doc? true
                    :task      (pretty-print -config)}

  setup            {:doc  "Setup dependencies"
                    :task (shell "npm run setup")}

  outdated         {:doc  "Check for outdated dependencies"
                    :task (shell "npm run outdated")}

  outdated:upgrade {:doc  "Upgrade outdated dependencies"
                    :task (shell "npm run outdated:upgrade")}

  clean            {:doc  "Cleanup"
                    :task (shell "npm run clean")}

  lint             {:doc  "Run linters"
                    :task (do
                            (shell "cljstyle check src dev/src test/src")
                            (shell "clj-kondo --lint src dev/src test/src"))}

  lint:fix         {:doc  "Run linters & fix"
                    :task (shell "cljstyle fix src dev/src test/src")}

  repl             {:doc     "Run REPL"
                    :depends [clean]
                    :task    (shell {:extra-env extra-env} "npm run repl")}

  test             {:doc     "Run tests"
                    :depends [clean]
                    :task    (shell {:extra-env extra-env} "npm run test")}

  build            {:doc     "Run build"
                    :depends [clean]
                    :task    (shell {:extra-env extra-env} "npm run build")}

  dist             {:doc  "Make dist"
                    :task (shell {:extra-env extra-env} "npm run dist")}

  dist:serve       {:doc  "Serve dist"
                    :task (shell {:extra-env extra-env} "npm run dist:serve")}}}
